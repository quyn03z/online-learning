@model CourseDetailDTO
@using OnlineLearning.Models.Domains.CourseModels.LessonModels

@{
	Layout = "_Layout";
	Lesson currentLesson = null;
	var completedLessonIds = new List<long>();
	string embedUrl = "";
	if(Model != null){
		if (ViewBag.CompletedLessonIds is List<long> list)
		{
			completedLessonIds = list;
		}
		// Kiểm tra nếu Model.Modules không rỗng thì gán giá trị cho currentLesson
		if (Model.Modules != null && Model.Modules.Any())
		{
			currentLesson = Model.Modules
				.SelectMany(m => m.Lessons)
				.FirstOrDefault(l => l.LessonId == ViewBag.LessonId);
		}

		string videoUrl = currentLesson?.LessonVideo ?? "";

		if (!string.IsNullOrEmpty(videoUrl))
		{
			var youtubeRegex = new System.Text.RegularExpressions.Regex(@"(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([\w-]+)");
			var match = youtubeRegex.Match(videoUrl);

			if (match.Success)
			{
				embedUrl = $"https://www.youtube.com/embed/{match.Groups[1].Value}?enablejsapi=1";
			}
		}
	}
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/izitoast/dist/css/iziToast.min.css">

<!-- MENTEE LESSON -->

<div class="container mt-5">

@if (ViewBag.IsCourseExisted == false)
{
	<div class="card shadow-sm border-0 mt-4">
			<div class="card-body text-center py-5">
				<i class="fa fa-book-open text-secondary" style="font-size: 3rem;"></i>
				<h4 class="text-muted mt-3">Không tìm thấy khóa học phù hợp</h4>
				<p class="text-secondary">Vui lòng quay lại sau khi nội dung được cập nhật.</p>
			</div>
		</div>
	}
	else if (Model != null)
	{
	<!-- MENTEE LESSON -->
	<h1 class="page-heading text-primary fw-bold">@Model.Course.CourseName</h1>
	@if (Model.Modules == null || !Model.Modules.Any())
	{
		<div class="card shadow-sm border-0 mt-4">
			<div class="card-body text-center py-5">
				<i class="fa fa-book-open text-secondary" style="font-size: 3rem;"></i>
				<h4 class="text-muted mt-3">Hiện chưa có bài học nào.</h4>
				<p class="text-secondary">Vui lòng quay lại sau khi nội dung được cập nhật.</p>
			</div>
		</div>
	}
	else
	{
		<div class="row">
			<!-- VIDEO + NỘI DUNG -->
			<div class="col-lg-8">
				<div class="card shadow-sm rounded-lg">
					<div class="ratio ratio-16x9">
						<iframe id="lessonVideo" class="embed-responsive-item"
								src="@embedUrl"
								title="Lesson Video"
								frameborder="0"
								allowfullscreen>
						</iframe>
					</div>
					<div class="card-body">
						<h4 class="fw-bold text-primary">@(currentLesson?.LessonName ?? "No Lesson Selected")</h4>
						<p class="text-secondary">@(currentLesson?.LessonContent ?? "No content available.")</p>
					</div>
				</div>

				<!-- BÌNH LUẬN -->
				<div class="card mt-4 shadow-sm rounded-lg">
					<div class="card-header bg-primary text-white">
						<h5 class="mb-0 text-white">Bình luận</h5>
					</div>

					<div class="card-body">

								@* 	comment  *@						
						<div class="comment-box d-flex align-items-center">
							<img src="@(Context.Session.GetString("Avatar") ?? Url.Content("/images/default-avatar.jpg"))"
								 alt="User Avatar" class="avatar rounded-circle me-2" width="50" height="50">

							<form method="post" class="d-flex flex-grow-1" asp-controller="Comment" asp-action="Create" asp-area="Mentee">
								<textarea name="Content" rows="1" class="form-control me-2" placeholder="Thêm bình luận..."></textarea>
								<input type="hidden" name="LessonId" value="@ViewBag.LessonId"/>
								<input type="hidden" name="UserId" value="@ViewBag.UserId" />
								<input type="hidden" name="CourseId" value="@ViewBag.CourseId" /> <!-- Add this -->
								<button type="submit" class="btn btn-primary">Gửi</button>
							</form>

						</div>


						<div class="comment-list mt-3">
							<!-- Danh sách bình luận -->
							<div class="container mt-4">
								<div class="comment-list mt-3">
									@if (ViewBag.Comments != null && ViewBag.Comments.Count > 0)
									{
										var currentUserId = Context.Session.GetString("UserId");
										foreach (var comment in ViewBag.Comments as List<DiscussionLessonDto>)
										{
											<div class="comment-item d-flex align-items-start p-2 border rounded mb-2">
												<img src="@(comment.Avatar ?? Url.Content("/images/default-avatar.jpg"))"
													 alt="User Avatar" class="avatar rounded-circle me-2" width="40" height="40">
												<div class="comment-content flex-grow-1 ">
													<div class="d-flex justify-content-between align-items-center">
														<div >
														<strong>@(comment.UserName ?? comment.UserId.ToString())</strong>
														<span class="text-muted">@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
														</div>
													<div class="comment-actions mt-2">
													@if (currentUserId != null && comment.UserId.ToString() == currentUserId)
													{ 
														
														<button class="btn btn-sm btn-outline-secondary edit-btn">Sửa</button>

														<form method="post" asp-controller="Comment" asp-action="Delete" asp-area="Mentee" class="d-inline delete-form">
															<input type="hidden" name="DiscussionId" value="@comment.DiscussionId" />
															<button type="submit" class="btn btn-sm btn-outline-danger delete-btn">Xóa</button>
														</form>

													}
														<button class="btn btn-sm btn-outline-primary reply-btn">Trả lời</button>
													</div>
													</div>
													
													<p class="comment-text">@comment.Comment</p>
													<input type="text" class="form-control edit-input d-none" value="@comment.Comment">

													<!-- Thêm form để gửi dữ liệu chỉnh sửa -->
													<form method="post" asp-controller="Comment" asp-action="Edit" asp-area="Mentee" class="edit-form d-none">
														<input type="hidden" name="DiscussionId" value="@comment.DiscussionId" />
														<input type="hidden" name="Comment" class="edit-content" value="@comment.Comment" />
														<input type="hidden" name="CourseId" value="@ViewBag.CourseId" />
														<input type="hidden" name="LessonId" value="@ViewBag.LessonId"/>
													</form>


													<div class="reply-box d-none mt-2">
														<form method="post" class="d-flex flex-grow-1" asp-controller="Comment" asp-action="Replies" asp-area="Mentee">
															<textarea name="content" class="form-control" rows="1" placeholder="Nhập phản hồi..."></textarea>
															<input type="hidden" name="LessonId" value="@ViewBag.LessonId" />
															<input type="hidden" name="UserId" value="@ViewBag.UserId" />
															<input type="hidden" name="CourseId" value="@ViewBag.CourseId" />
															<input type="hidden" name="ParentCommentId" value="@comment.DiscussionId" />
															<button type="submit" class="btn btn-sm btn-primary mt-1 send-reply">Gửi</button>
														</form>
													</div>

													<!-- Danh sách phản hồi -->
													<div class="reply-list mt-2">
														@if (comment.Replies != null && comment.Replies.Any())
														{
															foreach (var reply in comment.Replies)
															{
																<div class="reply-item d-flex align-items-start p-2 border rounded mb-1">
																	<img src="@(reply.Avatar ?? Url.Content("/images/default-avatar.jpg"))"
																		 alt="User Avatar" class="avatar rounded-circle me-2" width="30" height="30">
																	<div class="reply-content flex-grow-1">
																		<strong>@(reply.UserName ?? reply.UserId.ToString())</strong>
																		<span class="text-muted">@reply.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
																		<p class="reply-text" >@reply.Comment</p>
																		<input type="text" class="form-control edit-input d-none" value="@reply.Comment">
																	</div>

																	<div class="comment-actions mt-2">
																	@if (currentUserId != null && reply.UserId.ToString() == currentUserId)
																	{ 
														
																		<button class="btn btn-sm btn-outline-secondary edit-btn">Sửa</button>

																		<form method="post" asp-controller="Comment" asp-action="Delete" asp-area="Mentee" class="d-inline delete-form">
																			<input type="hidden" name="DiscussionId" value="@reply.DiscussionId" />
																			<button type="submit" class="btn btn-sm btn-outline-danger delete-btn">Xóa</button>
																		</form>

																	}
																	</div>

																		<form method="post" asp-controller="Comment" asp-action="Edit" asp-area="Mentee" class="edit-form d-none">
																			<input type="hidden" name="DiscussionId" value="@reply.DiscussionId" />
																			<input type="hidden" name="Comment" class="edit-content" value="@reply.Comment" />
																			<input type="hidden" name="CourseId" value="@ViewBag.CourseId" />
																			<input type="hidden" name="LessonId" value="@ViewBag.LessonId"/>
																		</form>
																</div>
															}
														}
													</div>
												</div>
											</div>
										}
									}
									else
									{
										<p>Chưa có bình luận nào.</p>
									}
								</div>

							</div>
						</div>
					</div>

				</div>
			</div>

			<!-- DANH SÁCH MODULE + BÀI HỌC -->
			<div class="col-lg-4">
				<div class="card shadow-sm rounded-lg">
					<div class="card-body">
						<h3 class="text-primary fw-bold">DANH SÁCH BÀI HỌC</h3>

						@if (Model.Modules.Any())
						{
							<div class="accordion scrollable-modules" id="moduleAccordion">
								@foreach (var module in Model.Modules.OrderBy(m => m.ModuleNumber))
								{
									string moduleId = $"module-{module.ModuleId}";
									bool isModuleActive = module.Lessons.Any(l => l.LessonId == ViewBag.LessonId);

									<div class="accordion-item border-0">
										<h2 class="accordion-header" id="heading-@moduleId">
											<button class="accordion-button @(isModuleActive ? "active-module" : "")"
													type="button"
													data-bs-toggle="collapse"
													data-bs-target="#collapse-@moduleId"
													aria-expanded="true"
													aria-controls="collapse-@moduleId">
												@module.ModuleName
											</button>
										</h2>
										<div id="collapse-@moduleId" class="accordion-collapse collapse @(isModuleActive ? "show" : "")"
											 aria-labelledby="heading-@moduleId"
											 data-bs-parent="#moduleAccordion">
											<div class="accordion-body">
												<ul class="list-group">

													<!-- Title for Lessons -->
													<li class="list-group-item bg-light text-primary fw-bold">
														📖 Lessons
													</li>

													@foreach (var lesson in module.Lessons.OrderBy(l => l.LessonNumber))
													{
														bool isLessonActive = lesson.LessonId == ViewBag.LessonId;
														bool isCompleted = completedLessonIds.Contains(lesson.LessonId);

														<li class="list-group-item d-flex justify-content-between align-items-center @(isLessonActive ? "active-lesson bg-secondary text-white" : "")">
															<a href="@Url.Action("Index", new { courseId = Model.Course.CourseId, lessonId = lesson.LessonId })"
															   class="text-decoration-none @(isLessonActive ? "fw-bold text-white" : "text-dark")">
																@lesson.LessonName
															</a>
															@if (isCompleted)
															{
																<span class="fa fa-check text-success"></span>
															}
														</li>
													}

													<!-- Title for Quizzes -->
													<li class="list-group-item bg-light text-danger fw-bold mt-2">
														📝 Quizzes
													</li>

													@* Quizzes start *@
													@foreach (var quiz in module.Quizzes)
													{
														bool isQuizzActive = false; // Thay đổi nếu có điều kiện active cụ thể
														bool isCompleted = false; // Thay đổi nếu có dữ liệu hoàn thành

														<li class="list-group-item d-flex justify-content-between align-items-center @(isQuizzActive ? "active-lesson bg-warning text-dark" : "")">
															<a href="@Url.Action("Index", new { courseId = Model.Course.CourseId, lessonId = 1 })"
															   class="text-decoration-none @(isQuizzActive ? "fw-bold text-white" : "text-dark")">
																@quiz.QuizName
															</a>
															@if (isCompleted)
															{
																<span class="fa fa-check text-success"></span>
															}
														</li>
													}
													@* Quizzes end *@
												</ul>
											</div>
										</div>

									</div>
								}
							</div>
						}
						else
						{
							<p class="text-muted">Chưa có bài học nào.</p>
						}
					</div>
				</div>

				<!-- ĐÁNH GIÁ -->
				<div class="card mt-3 shadow-sm rounded-lg">
						<div class="card-header bg-info text-white">
							<h5 class="mb-0 text-white">Đánh giá khóa học</h5>
						</div>
						<div class="card-body text-center">
							@if (ViewBag.UserRating == null)
						{
							<form asp-action="SubmitRating" asp-controller="Lesson" asp-route-courseId="@Model.Course.CourseId" method="post">
								<div class="form-group mb-3">
									<div class="star-rating">
										@for (int i = 5; i >= 1; i--)
										{
											<input type="radio" id="star-@i" name="rating" value="@i" required />
											<label for="star-@i" class="fa fa-star text-secondary"></label>
										}
									</div>
								</div>
								<div class="form-group mb-3">
									<label>Phản hồi:</label>
									<textarea name="feedback" class="form-control" rows="3" placeholder="Nhập phản hồi của bạn..." required></textarea>
								</div>
								<button type="submit" class="btn btn-primary">Gửi đánh giá</button>
							</form>
						}
						else
						{
							<!-- Hiển thị đánh giá của người dùng nếu đã gửi -->
							<div class="user-rating">
								<p><strong>@ViewBag.UserRating.User.FullName</strong></p>
								<div>
									@for (int i = 1; i <= 5; i++)
									{
										<i class="fa fa-star @(i <= ViewBag.UserRating.Rating ? "text-warning" : "text-secondary")"></i>
									}
								</div>
								<p>@ViewBag.UserRating.Feedback</p>
							</div>
						}
					</div>
				</div>

				<!-- NÚT TRỢ GIÚP -->
				@* <a href="#" class="btn btn-outline-primary w-100 mt-3">
			<i class="material-icons btn__icon--left">help</i> Hỗ trợ
			</a> *@
			</div>
		</div>
	}
	}
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- Custom CSS -->
<style>

.reply-text {
    max-width: 100%;
    display: -webkit-box;
    -webkit-line-clamp: 3;@*  /* Giới hạn tối đa 3 dòng */ *@
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    word-break: break-all;
}

.reply-text.expanded {
    -webkit-line-clamp: unset; @* /* Bỏ giới hạn số dòng khi mở rộng */ *@
    overflow: visible; @* /* Hiển thị toàn bộ nội dung */ *@
}

	.comment-item, .reply-item {
    position: relative;
}

.comment-actions {
    display: flex;
    gap: 5px; @* /* Space between buttons */ *@
}

.comment-content, .reply-content {
    width: 100%;
}

.comment-actions button {
    margin-left: 5px;
}
@* 	/* VIDEO */
 *@	.ratio-16x9 {
		width: 100%;
		height: 420px;
		border-radius: 10px;
	}

@* 	/* ACCORDION */
 *@	.accordion-button {
		background-color: #f8f9fa;
		color: #333;
		font-weight: bold;
		border-radius: 5px;
		transition: 0.3s;
	}

		.accordion-button:hover {
			background-color: #e0f4ff;
		}

@* 	/* MODULE ACTIVE */
 *@	.active-module {
		background-color: #06BBCC !important;
		color: white !important;
	}

		.active-module:hover {
			background-color: #06BBCC !important;
		}

@* 	/* BÀI HỌC ACTIVE */
 *@	.active-lesson {
		background-color: #06BBCC !important;
		color: white !important;
		font-weight: bold;
	}

		.active-lesson a {
			color: white !important;
		}

@* 	/* SHADOW & BO GÓC */
 *@	.shadow-sm {
		box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
	}

	.rounded-lg {
		border-radius: 12px !important;
	}

	.scrollable-modules {
		max-height: 400px; /* Giới hạn chiều cao */
		overflow-y: auto; /* Cho phép cuộn dọc */
		padding-right: 10px; /* Giữ khoảng trống để thanh cuộn không che nội dung */
	}

		/* Tùy chỉnh thanh cuộn */
		.scrollable-modules::-webkit-scrollbar {
			width: 8px; /* Độ rộng thanh cuộn */
		}

		.scrollable-modules::-webkit-scrollbar-track {
			background: #f1f1f1; /* Màu nền */
			border-radius: 10px; /* Bo góc */
		}

		.scrollable-modules::-webkit-scrollbar-thumb {
			background: #888; /* Màu thanh kéo */
			border-radius: 10px;
		}

			.scrollable-modules::-webkit-scrollbar-thumb:hover {
				background: #555; /* Màu khi hover */
			}

</style>

<style>
   .star-rating {
    display: flex;
    flex-direction: row-reverse;
    justify-content: center;
}

.star-rating input {
    display: none; @* /* Ẩn input radio */ *@
}

.star-rating label {
    font-size: 1.2rem;
    cursor: pointer;
}

.star-rating input:checked ~ label,
.star-rating label:hover,
.star-rating label:hover ~ label {
    color: gold !important; @* /* Đổi màu khi hover hoặc chọn */ *@
}
</style>


<script>
	document.addEventListener("DOMContentLoaded", function () {
@*     // Xóa bình luận
 *@    document.querySelectorAll(".delete-btn").forEach(button => {
        button.addEventListener("click", function (e) {
            e.preventDefault();
            if (confirm("Bạn có chắc muốn xóa bình luận này?")) {
                let form = this.closest(".delete-form");
                form.submit();
            }
        });
    });

@* // Sửa bình luận (cả comment và reply)
 *@    document.querySelectorAll(".edit-btn").forEach(button => {
        button.addEventListener("click", function (e) {
            e.preventDefault();
@*             // Tìm phần tử cha (comment-item hoặc reply-item)
 *@            let item = this.closest(".comment-item, .reply-item");
@*             // Tìm text và input tương ứng
 *@            let text = item.querySelector(".comment-text, .reply-text");
            let input = item.querySelector(".edit-input");
            let form = item.querySelector(".edit-form");
            let contentInput = form.querySelector(".edit-content");

            if (input.classList.contains("d-none")) {
@*                 // Chuyển sang chế độ chỉnh sửa
 *@                input.classList.remove("d-none");
                text.classList.add("d-none");
                this.textContent = "Lưu";
            } else {
                // Lưu nội dung và gửi form
                contentInput.value = input.value;
                text.textContent = input.value;
                input.classList.add("d-none");
                text.classList.remove("d-none");
                this.textContent = "Sửa";
                form.submit();
            }
        });
    });

@*     // Hiển thị ô nhập phản hồi
 *@    document.querySelectorAll(".reply-btn").forEach(button => {
        button.addEventListener("click", function () {
            let replyBox = this.closest(".comment-item").querySelector(".reply-box");
            replyBox.classList.toggle("d-none");
        });
    });

@*     // Gửi phản hồi
 *@    document.querySelectorAll(".send-reply").forEach(button => {
        button.addEventListener("click", function () {
            let replyBox = this.closest(".reply-box");
            let replyText = form.querySelector("textarea[name='content']").value.trim();

            if (replyText !== "") {	
                let replyList = this.closest(".comment-item").querySelector(".reply-list");
                let replyItem = document.createElement("div");
                replyItem.classList.add("reply-item", "d-flex", "align-items-start", "p-2", "border", "rounded", "mb-1");
                replyItem.innerHTML = `
                    <img src="avatar3.jpg" alt="User Avatar" class="avatar rounded-circle me-2" width="30" height="30">
                    <div class="reply-content flex-grow-1">
                        <strong>Bạn</strong> <span class="text-muted">Vừa xong</span>
                        <p class="reply-text">${replyText}</p>
                    </div>
                `;
                replyList.appendChild(replyItem);
                replyBox.querySelector("textarea").value = "";
                replyBox.classList.add("d-none");
            }
        });
    });
});
</script>


<script src="https://cdn.jsdelivr.net/npm/izitoast/dist/js/iziToast.min.js"></script>

<script>
	function showToast(type, title, message) {
		iziToast[type]({
			title: title,
			message: message,
			position: 'topRight'
		});
	}
</script>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		var successMessage = '@TempData["Success"]';
		if (successMessage) {
			showToast('success', 'Success', successMessage);
		}
	});
	 document.addEventListener("DOMContentLoaded", function () {
			var errorMessage = '@TempData["Error"]';
			if (errorMessage) {
				showToast('error', 'Error', errorMessage);
			}
		});
</script>

<script>
	var player;
	var currentLessonId = @(currentLesson?.LessonId ?? 0); @* // Lấy LessonId từ Razor *@

@* 	// Initialize YouTube API
 *@	function onYouTubeIframeAPIReady() {
		console.log("YouTube API Ready! Initializing player...");

		var videoElement = document.getElementById("lessonVideo");
		if (currentLessonId > 0 && videoElement) {
			console.log("Creating YT.Player for lesson ID:", currentLessonId);
			player = new YT.Player("lessonVideo", {
				height: '100%',
				width: '100%',
				events: {
					"onStateChange": onPlayerStateChange,
					"onError": onPlayerError,
					"onReady": onPlayerReady
				}
			});
		} else {
			console.warn("No valid lesson ID or video element found.");
		}
	}

	function onPlayerReady(event) {
		console.log("Player is ready");
@* 		// You can add any initialization logic here
 *@	}

	function onPlayerStateChange(event) {
		console.log("Player state changed:", event.data);

		if (event.data === YT.PlayerState.ENDED && currentLessonId > 0) {
			console.log("Video ended! Marking lesson as completed...");
			markLessonCompleted(currentLessonId);
		}
	}

	function onPlayerError(event) {
		console.error("YouTube Player Error:", event.data);
@* 		// Handle specific error codes
 *@		switch (event.data) {
			case 2:
				console.error("Invalid video ID");
				break;
			case 5:
				console.error("HTML5 player error");
				break;
			case 100:
				console.error("Video not found or removed");
				break;
			case 101:
			case 150:
				console.error("Video playback not allowed on embedded player");
				break;
			default:
				console.error("Unknown error occurred");
		}
	}

	function markLessonCompleted(lessonId) {
		fetch("/Mentee/Lesson/CompleteLesson", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"X-Requested-With": "XMLHttpRequest"
			},
			body: JSON.stringify({ lessonId: lessonId })
		})
			.then(response => {
				if (!response.ok) {
					throw new Error(`HTTP error! Status: ${response.status}`);
				}
				return response.json();
			})
			.then(data => {
				if (data.success) {
					let lessonLink = document.querySelector(`a[href*='lessonId=${lessonId}']`);
					if (lessonLink && !lessonLink.querySelector(".fa-check")) {
						lessonLink.insertAdjacentHTML("beforeend", "<i class='fa fa-check text-success ms-2'></i>");
					}
					console.log(`Lesson ${lessonId} marked as completed.`);
				} else {
					console.warn("Failed to mark lesson as completed:", data.message);
					if (data.message.includes("login")) {
						window.location.href = "/Login";
					}
				}
			})
			.catch(error => {
				console.error("Error marking lesson as completed:", error);
				return false;
			});
	}

@* 	// Load YouTube API if not already loaded
 *@	if (typeof YT === "undefined" || typeof YT.Player === "undefined") {
		var tag = document.createElement("script");
		tag.src = "https://www.youtube.com/iframe_api";
		var firstScriptTag = document.getElementsByTagName("script")[0];
		firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
	} else {
		onYouTubeIframeAPIReady();
	}
</script>

