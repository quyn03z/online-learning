// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineLearning.Data;

#nullable disable

namespace OnlineLearning.Migrations
{
    [DbContext(typeof(OnlLearnDBContext))]
    [Migration("20250318072836_UpdateRelationship")]
    partial class UpdateRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineLearning.Models.Domains.AIModels.AIReviewCourse", b =>
                {
                    b.Property<long>("AIReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AIReviewId"));

                    b.Property<float>("AIConfidence")
                        .HasColumnType("real");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("AIReviewId");

                    b.HasIndex("CourseId");

                    b.ToTable("AIReviewCourses");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.AIModels.AITrainingData", b =>
                {
                    b.Property<long>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DataId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpectedOutput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataId");

                    b.ToTable("AITrainingData");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.AIModels.ChatbotMessage", b =>
                {
                    b.Property<long>("AIChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AIChatId"));

                    b.Property<string>("BotResponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AIChatId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatbotMessages");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LanguageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4493),
                            LanguageName = "English",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 2L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4498),
                            LanguageName = "Spanish",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 3L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4500),
                            LanguageName = "Mandarin Chinese",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 4L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4502),
                            LanguageName = "Hindi",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 5L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4504),
                            LanguageName = "Arabic",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 6L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4508),
                            LanguageName = "Bengali",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 7L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4510),
                            LanguageName = "Portuguese",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 8L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4512),
                            LanguageName = "Russian",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 9L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4514),
                            LanguageName = "Japanese",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 10L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4516),
                            LanguageName = "Vietnamese",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 11L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4518),
                            LanguageName = "Korean",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 12L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4520),
                            LanguageName = "French",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 13L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4522),
                            LanguageName = "German",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 14L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4524),
                            LanguageName = "Italian",
                            Status = 2
                        },
                        new
                        {
                            LanguageId = 15L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4526),
                            LanguageName = "Turkish",
                            Status = 2
                        });
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Level", b =>
                {
                    b.Property<long>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LevelId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Course", b =>
                {
                    b.Property<long>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CourseId"));

                    b.Property<long?>("Acceptor")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LevelId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("StudyTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CourseId");

                    b.HasIndex("Acceptor");

                    b.HasIndex("Creator");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CourseCategory", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseCategories");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CourseImageUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseImageUrls");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.LessonModels.DiscussionLesson", b =>
                {
                    b.Property<long>("DisscussionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DisscussionId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCommentID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("DisscussionId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionLessons");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.LessonModels.Lesson", b =>
                {
                    b.Property<long>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LessonId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LessonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("int");

                    b.Property<string>("LessonVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LessonId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Module", b =>
                {
                    b.Property<long>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModuleId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ModuleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.HasKey("NotificationId");

                    b.HasIndex("CourseId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Option", b =>
                {
                    b.Property<long>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OptionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionNum")
                        .HasColumnType("int");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Quiz", b =>
                {
                    b.Property<long>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuizId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PassScore")
                        .HasColumnType("int");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuizTime")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("QuizId");

                    b.HasIndex("ModuleId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.Certificate", b =>
                {
                    b.Property<long>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CertificateId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("IssuerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CertificateId");

                    b.HasIndex("CourseId");

                    b.HasIndex("IssuerId");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.FAQ", b =>
                {
                    b.Property<long>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FaqId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CommonStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FaqId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.TransactionHistory", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExternalTransactionId")
                        .IsUnique()
                        .HasFilter("[ExternalTransactionId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.AdminReviewCourse", b =>
                {
                    b.Property<long>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReviewId"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.ToTable("AdminReviewCourses");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.CourseEnrollment", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.CourseRating", b =>
                {
                    b.Property<long>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RatingId"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RatingId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseRatings");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.UserAnswer", b =>
                {
                    b.Property<long>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserAnswerId"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<long?>("OptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.UserQuizResult", b =>
                {
                    b.Property<long>("UserQuizResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserQuizResultId"));

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserQuizResultId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuizResults");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.WishList", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "MENTOR"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "MENTEE"
                        });
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4094),
                            Dob = new DateOnly(2003, 6, 7),
                            Email = "admin@admin.com",
                            FullName = "My Admin",
                            Gender = true,
                            IsActived = true,
                            IsDeleted = false,
                            Password = "123456",
                            Phone = "0000000000",
                            UpdatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4104)
                        },
                        new
                        {
                            UserId = 2L,
                            CreatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4208),
                            Dob = new DateOnly(2003, 6, 7),
                            Email = "admin2@admin.com",
                            FullName = "My Admin 2",
                            Gender = true,
                            IsActived = true,
                            IsDeleted = false,
                            Password = "123456",
                            Phone = "0000000001",
                            UpdatedAt = new DateTime(2025, 3, 18, 14, 28, 33, 212, DateTimeKind.Local).AddTicks(4209)
                        });
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2L,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.Wallet", b =>
                {
                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("VND");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.AIModels.AIReviewCourse", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.AIModels.ChatbotMessage", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Course", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "AcceptorUser")
                        .WithMany("AcceptedCourses")
                        .HasForeignKey("Acceptor")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "CreatorUser")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId");

                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId");

                    b.Navigation("AcceptorUser");

                    b.Navigation("CreatorUser");

                    b.Navigation("Language");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CourseCategory", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Category", "Category")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany("CourseCategories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CourseImageUrl", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany("CourseImageUrls")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.LessonModels.DiscussionLesson", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.LessonModels.Lesson", "Lesson")
                        .WithMany("Discussions")
                        .HasForeignKey("LessonId");

                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.LessonModels.DiscussionLesson", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Lesson");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.LessonModels.Lesson", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Module", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Notification", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany("Notifications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Option", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.QuizModels.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Question", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.QuizModels.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Quiz", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Module", "Module")
                        .WithMany("Quizzes")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.Certificate", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Issuer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.Message", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.Miscellaneous.TransactionHistory", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Course");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.AdminReviewCourse", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.CourseEnrollment", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.CourseRating", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.UserAnswer", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.QuizModels.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.UserQuizResult", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.QuizModels.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserCourseRelationship.WishList", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.CourseModels.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.UserRole", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.Wallet", b =>
                {
                    b.HasOne("OnlineLearning.Models.Domains.UserModels.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("OnlineLearning.Models.Domains.UserModels.Wallet", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Category", b =>
                {
                    b.Navigation("CourseCategories");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.CategoryModels.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Course", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CourseCategories");

                    b.Navigation("CourseImageUrls");

                    b.Navigation("Modules");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.LessonModels.Lesson", b =>
                {
                    b.Navigation("Discussions");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.Module", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.CourseModels.QuizModels.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnlineLearning.Models.Domains.UserModels.User", b =>
                {
                    b.Navigation("AcceptedCourses");

                    b.Navigation("CreatedCourses");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallet");
                });
#pragma warning restore 612, 618
        }
    }
}
